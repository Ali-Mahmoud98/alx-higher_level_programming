This is ``matrix_divided`` module
==================================

Testing ``matrix_divided``
--------------------------

First import ``matrix_divided`` from ``your_module_name`` module:
::

    >>> matrix_divided = __import__("your_module_name").matrix_divided

This is how it is used:
::

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2.5)
    [[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], -2)
    [[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

Throws a TypeError when a non-numeric divisor is provided:
::

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 'a')
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

Throws a TypeError when the divisor is zero:
::

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
    ...
    TypeError: division by zero

Throws a TypeError when the matrix is not valid:
::

    >>> matrix_divided('invalid_matrix', 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Throws a TypeError when rows have different sizes:
::

    >>> matrix_divided([[1, 2, 3], [4, 5]], 2)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size
